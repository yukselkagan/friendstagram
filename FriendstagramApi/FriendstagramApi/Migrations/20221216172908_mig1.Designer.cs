// <auto-generated />
using System;
using FriendstagramApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FriendstagramApi.Migrations
{
    [DbContext(typeof(FriendstagramContext))]
    [Migration("20221216172908_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SharingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("SharingId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentText = "give it back",
                            CreatedAt = new DateTime(2022, 12, 16, 20, 29, 8, 203, DateTimeKind.Local).AddTicks(4645),
                            SharingId = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            CommentId = 2,
                            CommentText = "nope",
                            CreatedAt = new DateTime(2022, 12, 16, 20, 29, 9, 204, DateTimeKind.Local).AddTicks(4840),
                            SharingId = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            CommentId = 3,
                            CommentText = "ok",
                            CreatedAt = new DateTime(2022, 12, 16, 20, 29, 10, 204, DateTimeKind.Local).AddTicks(4909),
                            SharingId = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            CommentId = 4,
                            CommentText = "nice",
                            CreatedAt = new DateTime(2022, 12, 16, 20, 29, 11, 204, DateTimeKind.Local).AddTicks(4913),
                            SharingId = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            FriendshipId = 1,
                            FriendId = 2,
                            UserId = 1
                        },
                        new
                        {
                            FriendshipId = 2,
                            FriendId = 1,
                            UserId = 2
                        },
                        new
                        {
                            FriendshipId = 3,
                            FriendId = 3,
                            UserId = 1
                        },
                        new
                        {
                            FriendshipId = 4,
                            FriendId = 1,
                            UserId = 3
                        },
                        new
                        {
                            FriendshipId = 5,
                            FriendId = 3,
                            UserId = 2
                        },
                        new
                        {
                            FriendshipId = 6,
                            FriendId = 2,
                            UserId = 3
                        },
                        new
                        {
                            FriendshipId = 7,
                            FriendId = 5,
                            UserId = 4
                        },
                        new
                        {
                            FriendshipId = 8,
                            FriendId = 4,
                            UserId = 5
                        },
                        new
                        {
                            FriendshipId = 9,
                            FriendId = 4,
                            UserId = 3
                        },
                        new
                        {
                            FriendshipId = 10,
                            FriendId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.FriendshipRequest", b =>
                {
                    b.Property<int>("FriendshipRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FriendshipRequestId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendshipRequests");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Sharing", b =>
                {
                    b.Property<int>("SharingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SharingText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SharingId");

                    b.HasIndex("UserId");

                    b.ToTable("Sharings");

                    b.HasData(
                        new
                        {
                            SharingId = 1,
                            Path = "seed-sharing-1.jpg",
                            SharingText = "I like shire",
                            UserId = 1
                        },
                        new
                        {
                            SharingId = 2,
                            Path = "seed-sharing-2.jpg",
                            SharingText = "",
                            UserId = 2
                        },
                        new
                        {
                            SharingId = 3,
                            Path = "seed-sharing-3.jpg",
                            SharingText = "me",
                            UserId = 3
                        },
                        new
                        {
                            SharingId = 4,
                            Path = "seed-sharing-4.jpg",
                            SharingText = "",
                            UserId = 1
                        },
                        new
                        {
                            SharingId = 5,
                            Path = "seed-sharing-5.jpg",
                            SharingText = "",
                            UserId = 2
                        },
                        new
                        {
                            SharingId = 6,
                            Path = "seed-sharing-6.jpg",
                            SharingText = "fellowship tbt",
                            UserId = 3
                        },
                        new
                        {
                            SharingId = 7,
                            Path = "seed-sharing-7.jpg",
                            SharingText = "me and ring",
                            UserId = 3
                        },
                        new
                        {
                            SharingId = 8,
                            Path = "seed-sharing-8.jpg",
                            SharingText = "",
                            UserId = 4
                        },
                        new
                        {
                            SharingId = 9,
                            Path = "seed-sharing-9.jpg",
                            SharingText = "",
                            UserId = 5
                        },
                        new
                        {
                            SharingId = 10,
                            Path = "seed-sharing-10.jpg",
                            SharingText = "my ring, not sauron's",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DisplayName = "Gandalf the white",
                            Email = "gandalf@mail.com",
                            PasswordHash = " ,?b?Y[?K-#Kp",
                            ProfilePicture = "seed-gandalf-profile.jpg",
                            UserName = "gandalf"
                        },
                        new
                        {
                            UserId = 2,
                            DisplayName = "Aragorn",
                            Email = "aragorn@mail.com",
                            PasswordHash = " ,?b?Y[?K-#Kp",
                            ProfilePicture = "seed-aragorn-profile.jpg",
                            UserName = "aragorn"
                        },
                        new
                        {
                            UserId = 3,
                            DisplayName = "Frodo Offical",
                            Email = "frodo@mail.com",
                            PasswordHash = " ,?b?Y[?K-#Kp",
                            ProfilePicture = "seed-frodo-profile.jpg",
                            UserName = "frodo_offical"
                        },
                        new
                        {
                            UserId = 4,
                            DisplayName = "Sauron",
                            Email = "sauron@mail.com",
                            PasswordHash = " ,?b?Y[?K-#Kp",
                            ProfilePicture = "seed-sauron-profile.jpg",
                            UserName = "sauron"
                        },
                        new
                        {
                            UserId = 5,
                            DisplayName = "Witch king",
                            Email = "witch_king@mail.com",
                            PasswordHash = " ,?b?Y[?K-#Kp",
                            ProfilePicture = "seed-witch-profile.jpg",
                            UserName = "witch_king"
                        });
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Chat", b =>
                {
                    b.HasOne("FriendstagramApi.Entities.Models.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FriendstagramApi.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Comment", b =>
                {
                    b.HasOne("FriendstagramApi.Entities.Models.Sharing", "Sharing")
                        .WithMany()
                        .HasForeignKey("SharingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FriendstagramApi.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sharing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Friendship", b =>
                {
                    b.HasOne("FriendstagramApi.Entities.Models.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FriendstagramApi.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.FriendshipRequest", b =>
                {
                    b.HasOne("FriendstagramApi.Entities.Models.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FriendstagramApi.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Message", b =>
                {
                    b.HasOne("FriendstagramApi.Entities.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FriendstagramApi.Entities.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("FriendstagramApi.Entities.Models.Sharing", b =>
                {
                    b.HasOne("FriendstagramApi.Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
